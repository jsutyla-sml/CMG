Content Matrix Generator will help you create hooks to use for creating videos to use on TikTok, Instagram, and YouTube to help you promote your writing.

Deploying this project to Vercel is an excellent choice. Their system is practically built for this exact project structure (static frontend + api folder).

Here is the step-by-step guide to get your app live.

Prerequisites
A Google API Key: This requires Gemini to run, and an API key to make the generative calls.  Go to https://aistudio.google.com/api-keys to set up your API key.

A GitHub Account: Vercel's best workflow is to connect directly to a GitHub, GitLab, or Bitbucket repository. I'll use GitHub for this guide.

A Vercel Account: Sign up for a free account at vercel.com and connect it to your GitHub account.

ðŸš€ Step-by-Step Deployment Guide
Step 1: Prepare Your Project for GitHub
Before you upload your code, you need to add one important file to ensure you don't upload unnecessary folders (like node_modules).

Create a .gitignore file: In the root of your project folder, create a file named .gitignore (with the dot at the beginning).

Add node_modules: Open the file and add this single line:

node_modules/
This tells Git to ignore the folder that holds all your installed packages, which Vercel will install on its own.

Step 2: Push Your Project to GitHub
Create a new, empty repository on GitHub (e.g., "content-matrix-pwa").

From your project folder in your terminal, run these commands to upload your code:

Bash

# Initialize a new git repository
git init

# Add all your files (including the new .gitignore)
git add .

# Make your first save (commit)
git commit -m "Initial commit for Content Matrix PWA"

# Link your local folder to the GitHub repo (use the URL GitHub gives you)
git remote add origin https://github.com/your-username/content-matrix-pwa.git

# Push your code to GitHub
git push -u origin main
Step 3: Import Your Project in Vercel
Log in to your Vercel dashboard.

Click "Add New..." and select "Project".

Find your new GitHub repository (content-matrix-pwa) and click the "Import" button next to it.

Step 4: Configure and Deploy
This is the most important step. Vercel will ask you to configure your project.

Framework Preset: Vercel is smart and will likely detect your package.json and api folder. It should automatically select "Other". This is correct. This preset knows to:

Serve the files in the root (like index.html) as the static site.

Turn the api/ folder into serverless functions.

Build and Output Settings: You can leave these blank. Your project doesn't have a build step (it's not Next.js or React).

Environment Variables: This is the critical part.

Click to expand the "Environment Variables" section.

In the Name field, type GEMINI_API_KEY.

In the Value field, paste your secret Gemini API key (the one you got from Google AI Studio).

Click "Add".

Deploy: Click the "Deploy" button.

That's it! Vercel will pull your code, run npm install to get the @google/genai SDK, and deploy your site and API functions.

After 1-2 minutes, your project will be live. Vercel will give you a public URL (like content-matrix-pwa.vercel.app).
